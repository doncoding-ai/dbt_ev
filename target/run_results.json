{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.2", "generated_at": "2025-07-03T14:21:03.002728Z", "invocation_id": "dc90342e-b82d-489c-84a0-9744006ccc60", "invocation_started_at": "2025-07-03T14:20:47.870516Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-03T14:21:02.120127Z", "completed_at": "2025-07-03T14:21:02.126634Z"}, {"name": "execute", "started_at": "2025-07-03T14:21:02.127634Z", "completed_at": "2025-07-03T14:21:02.127634Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00850987434387207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_env.stg_ev_data", "compiled": true, "compiled_code": "/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n\n\nwith source_data as (\n\n    select * from RAW.CARS.ev_cars\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null", "relation_name": "ANALYTICS.ev.stg_ev_data", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-03T14:21:02.131634Z", "completed_at": "2025-07-03T14:21:02.135236Z"}, {"name": "execute", "started_at": "2025-07-03T14:21:02.136236Z", "completed_at": "2025-07-03T14:21:02.136236Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005600929260253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_env.dimension_model", "compiled": true, "compiled_code": "-- Use the `ref` function to select from other models\n\n-- models/marts/dim_model/dim_model.sql\n\nwith source as (\n    select distinct\n        brand,\n        model\n    from ANALYTICS.ev.stg_ev_data\n),\n\nwith_ids as (\n    select\n        row_number() over (order by brand, model) as model_id,\n        brand,\n        model\n    from source\n)\n\nselect * from with_ids", "relation_name": "ANALYTICS.ev.dimension_model", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-03T14:21:02.138240Z", "completed_at": "2025-07-03T14:21:02.141240Z"}, {"name": "execute", "started_at": "2025-07-03T14:21:02.142240Z", "completed_at": "2025-07-03T14:21:02.142240Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004999637603759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_env.fact_ev_specs", "compiled": true, "compiled_code": "-- models/marts/fact_ev_specs/fact_ev_specs.sql\n\nwith raw as (\n\n    select *\n    from ANALYTICS.ev.stg_ev_data\n\n),\n\ndim as (\n\n    select\n        model_id,\n        brand,\n        model\n    from ANALYTICS.ev.dimension_model\n\n),\n\nfinal as (\n\n    select\n        dim.model_id,\n\n        -- Basic specs\n        raw.top_speed_kmh,\n        raw.battery_capacity_kWh,\n        raw.battery_type,\n        coalesce(raw.number_of_cells, 0) as number_of_cells,\n        coalesce(raw.torque_nm, 0) as torque_nm,\n        raw.efficiency_wh_per_km,\n        raw.range_km,\n        raw.acceleration_0_100_s,\n        raw.fast_charging_power_kw_dc,\n        raw.fast_charge_port,\n        coalesce(raw.towing_capacity_kg, 0) as towing_capacity_kg,\n        try_cast(raw.cargo_volume_l as number) as cargo_volume_l,\n        raw.seats,\n\n        -- Standardized categoricals\n        upper(trim(raw.drivetrain)) as drivetrain_standardized,\n        split_part(trim(raw.segment), '-', 1) as segment_group,\n        initcap(trim(raw.car_body_type)) as car_body_type_standardized,\n\n        -- Performance category\n        case\n            when raw.acceleration_0_100_s < 4.0 then 'High'\n            when raw.acceleration_0_100_s between 4.0 and 7.0 then 'Medium'\n            when raw.acceleration_0_100_s > 7.0 then 'Low'\n            else 'Unknown'\n        end as performance_category,\n\n        -- Standardized units\n        raw.length_mm,\n        raw.width_mm,\n        raw.height_mm,\n        round(raw.length_mm / 1000.0, 2) as length_m,\n        round(raw.width_mm / 1000.0, 2) as width_m,\n        round(raw.height_mm / 1000.0, 2) as height_m,\n\n        -- Feature Engineering\n        case\n            when raw.fast_charging_power_kw_dc > 0 then\n                round(raw.battery_capacity_kWh / raw.fast_charging_power_kw_dc, 2)\n            else null\n        end as fast_charging_ratio,\n\n        raw.source_url\n\n    from raw\n    left join dim\n        on raw.brand = dim.brand\n        and raw.model = dim.model\n\n)\n\nselect * from final", "relation_name": "ANALYTICS.ev.fact_ev_specs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-03T14:21:02.145580Z", "completed_at": "2025-07-03T14:21:02.155402Z"}, {"name": "execute", "started_at": "2025-07-03T14:21:02.156398Z", "completed_at": "2025-07-03T14:21:02.156398Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012160778045654297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_env.not_null_dimension_model_model_id.2387222142", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect model_id\nfrom ANALYTICS.ev.dimension_model\nwhere model_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-03T14:21:02.158487Z", "completed_at": "2025-07-03T14:21:02.164471Z"}, {"name": "execute", "started_at": "2025-07-03T14:21:02.165845Z", "completed_at": "2025-07-03T14:21:02.165845Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0084381103515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_env.unique_dimension_model_model_id.b7f0a47e11", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    model_id as unique_field,\n    count(*) as n_records\n\nfrom ANALYTICS.ev.dimension_model\nwhere model_id is not null\ngroup by model_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-03T14:21:02.167103Z", "completed_at": "2025-07-03T14:21:02.172016Z"}, {"name": "execute", "started_at": "2025-07-03T14:21:02.172016Z", "completed_at": "2025-07-03T14:21:02.172016Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005915403366088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_env.not_null_fact_ev_specs_model_id.e497b14c27", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect model_id\nfrom ANALYTICS.ev.fact_ev_specs\nwhere model_id is null\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 8.174421787261963, "args": {"introspect": true, "defer": false, "log_level_file": "debug", "require_resource_names_without_spaces": true, "partial_parse_file_diff": true, "project_dir": "C:\\Users\\ADMIN\\OneDrive\\Desktop\\DBT\\dbt_ev", "show_all_deprecations": false, "show_resource_report": false, "indirect_selection": "eager", "quiet": false, "source_freshness_run_project_hooks": true, "state_modified_compare_more_unrendered_values": false, "favor_state": false, "upload_to_artifacts_ingest_api": false, "cache_selected_only": false, "partial_parse": true, "macro_debugging": false, "populate_cache": true, "log_format_file": "debug", "which": "generate", "empty_catalog": false, "static_parser": true, "use_colors": true, "log_file_max_bytes": 10485760, "state_modified_compare_vars": false, "vars": {}, "log_level": "info", "profiles_dir": "C:\\Users\\ADMIN\\.dbt", "skip_nodes_if_on_run_start_fails": false, "use_fast_test_edges": false, "validate_macro_args": false, "require_batched_execution_for_custom_microbatch_strategy": false, "log_path": "C:\\Users\\ADMIN\\OneDrive\\Desktop\\DBT\\dbt_ev\\logs", "compile": true, "send_anonymous_usage_stats": true, "printer_width": 80, "exclude": [], "require_nested_cumulative_type_params": false, "select": [], "use_colors_file": true, "version_check": true, "require_yaml_configuration_for_mf_time_spines": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "invocation_command": "dbt docs generate", "require_all_warnings_handled_by_warn_error": false, "write_json": true, "print": true, "require_explicit_package_overrides_for_builtin_materializations": true, "static": false, "strict_mode": false, "log_format": "default"}}